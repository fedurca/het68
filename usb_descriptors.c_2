// usb_descriptors.c (UAC2, 6ch mic @ 16k/16-bit, fixed)
// Works on TinyUSB; Linux enumerates cleanly.

#include "tusb.h"
#include <string.h>

// ---------------- Device descriptor ----------------
tusb_desc_device_t const desc_device = {
  .bLength            = sizeof(tusb_desc_device_t),
  .bDescriptorType    = TUSB_DESC_DEVICE,
  .bcdUSB             = 0x0200,

  .bDeviceClass       = 0x00,
  .bDeviceSubClass    = 0x00,
  .bDeviceProtocol    = 0x00,

  .bMaxPacketSize0    = CFG_TUD_ENDPOINT0_SIZE,

  .idVendor           = 0xCafe,
  .idProduct          = 0x4066,
  .bcdDevice          = 0x0100,

  .iManufacturer      = 0x01,
  .iProduct           = 0x02,
  .iSerialNumber      = 0x03,

  .bNumConfigurations = 0x01
};

uint8_t const* tud_descriptor_device_cb(void) {
  return (uint8_t const*)&desc_device;
}

// ---------------- Config descriptor (UAC2) ----------------
enum { ITF_NUM_AC = 0, ITF_NUM_AS, ITF_NUM_TOTAL };

#define EPNUM_AUDIO_IN        0x01
#define EP_ADDR_AUDIO_IN      (0x80 | EPNUM_AUDIO_IN)

#define AUDIO_N_CHANNELS      6
#define AUDIO_SAMPLE_RATE     16000
#define AUDIO_SAMPLE_BYTES    2
#define AUDIO_PACKET_SIZE     ((AUDIO_SAMPLE_RATE/1000) * AUDIO_N_CHANNELS * AUDIO_SAMPLE_BYTES) // 192

// UAC2 Entity IDs
#define ID_CLK   0x01
#define ID_IT    0x02
#define ID_OT    0x03

// Helpers
#define U16_LO(x)   ((uint8_t)((x) & 0xFF))
#define U16_HI(x)   ((uint8_t)(((x) >> 8) & 0xFF))

// Class-specific AC block total length (UAC2):
// AC Header (9) + Clock Source (8) + Input Terminal (17) + Output Terminal (12) = 46
#define AC_CS_TOTAL_LEN  (9 + 8 + 17 + 12)

// bmAttributes for Isochronous IN mic: Iso + Async + Data
#define ISO_IN_ASYNC_DATA  0x05

static uint8_t const desc_configuration[] = {
  // ---- Standard Configuration (wTotalLength patched in CB) ----
  9, TUSB_DESC_CONFIGURATION,
  0x00, 0x00,                // wTotalLength (patched)
  ITF_NUM_TOTAL,             // bNumInterfaces = 2 (AC + AS)
  1,                         // bConfigurationValue
  0,                         // iConfiguration
  0x80,                      // bmAttributes (bus powered)
  50,                        // bMaxPower (100 mA)

  // ---- IAD (Audio Function) ----
  8, TUSB_DESC_INTERFACE_ASSOCIATION,
  ITF_NUM_AC, 2,             // first IF, count (AC + AS)
  TUSB_CLASS_AUDIO, 0x00, 0x00,
  0,

  // ---- Standard AC Interface (alt 0, no EP) ----
  9, TUSB_DESC_INTERFACE,
  ITF_NUM_AC, 0, 0,
  TUSB_CLASS_AUDIO, 0x01, 0x20,   // AUDIO / AUDIOCONTROL / UAC2
  0,

  // ---- Class-Specific AC Header (UAC2) ----
  // Order (UAC2!): bcdADC, bCategory, wTotalLength, bmControls
  9, 0x24, 0x01,
  0x00, 0x02,                 // bcdADC = 0x0200 (LSB first)
  0x00,                       // bCategory = 0 (Undefined) is fine
  U16_LO(AC_CS_TOTAL_LEN), U16_HI(AC_CS_TOTAL_LEN), // wTotalLength = 46
  0x00,                       // bmControls = 0 (no latency ctrl)

  // ---- Clock Source Entity ----
  // bLength=8, subtype=CLOCK_SOURCE (0x0A)
  // bmAttributes=0x03 (internal fixed), bmControls=0x07 (freq R/W, validity R)
  8, 0x24, 0x0A, ID_CLK, 0x03, 0x07, 0x00, 0x00,

  // ---- Input Terminal (Microphone) ----
  // bLength=17, subtype=INPUT_TERMINAL (0x02), wTerminalType=0x0201 (Microphone)
  17, 0x24, 0x02, ID_IT, 0x01, 0x02, 0x00, ID_CLK,
  AUDIO_N_CHANNELS,           // bNrChannels = 6
  0x00, 0x00, 0x00, 0x00,     // bmChannelConfig = 0 (unspecified positions)
  0x00,                       // iChannelNames
  0x00, 0x00,                 // bmControls
  0x00,                       // iTerminal

  // ---- Output Terminal (USB Streaming) ----
  // bLength=12, subtype=OUTPUT_TERMINAL (0x03), wTerminalType=0x0101 (USB Streaming)
  12, 0x24, 0x03, ID_OT, 0x01, 0x01, 0x00,
  ID_IT,                      // bSourceID = Input Terminal
  ID_CLK,                     // bCSourceID = Clock Source
  0x00, 0x00,                 // bmControls
  0x00,                       // iTerminal

  // ---- AS Interface, alt 0 (zero bandwidth) ----
  9, TUSB_DESC_INTERFACE,
  ITF_NUM_AS, 0, 0,
  TUSB_CLASS_AUDIO, 0x02, 0x20, 0,

  // ---- AS Interface, alt 1 (operational) ----
  9, TUSB_DESC_INTERFACE,
  ITF_NUM_AS, 1, 1,               // 1 endpoint (iso IN)
  TUSB_CLASS_AUDIO, 0x02, 0x20, 0,

  // ---- CS AS General (UAC2 order) ----
  // bLength=16, subtype=AS_GENERAL (0x01)
  // bTerminalLink, bmControls, bFormatType, bmFormats(4), bNrChannels, bmChannelConfig(4), iChannelNames
  16, 0x24, 0x01,
  ID_OT,                      // bTerminalLink = Output Terminal
  0x00,                       // bmControls
  0x01,                       // bFormatType = FORMAT_TYPE_I
  0x01, 0x00, 0x00, 0x00,     // bmFormats = PCM
  AUDIO_N_CHANNELS,           // bNrChannels = 6
  0x00, 0x00, 0x00, 0x00,     // bmChannelConfig = 0
  0x00,                       // iChannelNames

  // ---- Type I Format ----
  // bSubslotSize = 2 (bytes), bBitResolution = 16
  6, 0x24, 0x02, 0x01, AUDIO_SAMPLE_BYTES, 16,

  // ---- Standard ISO IN Endpoint ----
  7, TUSB_DESC_ENDPOINT,
  EP_ADDR_AUDIO_IN,
  ISO_IN_ASYNC_DATA,          // Isochronous, Asynchronous, Data
  U16_LO(AUDIO_PACKET_SIZE), U16_HI(AUDIO_PACKET_SIZE), // 192 bytes
  0x01,                       // bInterval = 1 ms

  // ---- CS ISO IN Endpoint ----
  8, 0x25, 0x01,              // CS_ENDPOINT, EP_GENERAL
  0x00, 0x00,                 // bmAttributes, bmControls
  0x00, 0x00                  // bLockDelayUnits, wLockDelay
};

// We only need to patch Configuration.wTotalLength.
static uint8_t cfg_desc_buf[sizeof(desc_configuration)];

uint8_t const* tud_descriptor_configuration_cb(uint8_t index) {
  (void) index;
  memcpy(cfg_desc_buf, desc_configuration, sizeof(desc_configuration));
  uint16_t const total_len = sizeof(desc_configuration);
  cfg_desc_buf[2] = U16_LO(total_len);
  cfg_desc_buf[3] = U16_HI(total_len);
  // (Optional) force bNumInterfaces just in case:
  cfg_desc_buf[4] = ITF_NUM_TOTAL; // = 2
  return cfg_desc_buf;
}

// ---------------- String descriptors ----------------
static uint16_t _desc_str[32];
static char const* string_desc[] = {
  (const char[]){ 0x09, 0x04 }, // 0: English (US)
  "het68",                      // 1: Manufacturer
  "Pico 6ch Microphone",        // 2: Product
  "21081968",                   // 3: Serial
};

uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
  (void) langid;
  uint8_t chr_count;

  if (index == 0) {
    _desc_str[1] = 0x0409;
    chr_count = 1;
  } else {
    if (index >= (sizeof(string_desc)/sizeof(string_desc[0]))) return NULL;
    const char* str = string_desc[index];
    chr_count = (uint8_t)strlen(str);
    if (chr_count > 31) chr_count = 31;
    for (uint8_t i = 0; i < chr_count; i++) _desc_str[1+i] = (uint8_t)str[i];
  }

  _desc_str[0] = (TUSB_DESC_STRING << 8) | (2*chr_count + 2);
  return _desc_str;
}

