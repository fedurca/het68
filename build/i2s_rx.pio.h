// ---------------------------------------------------------------- //
// This file is autogenerated by pioasm version 2.2.0; do not edit! //
// ---------------------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// i2s_rx //
// ------ //

#define i2s_rx_wrap_target 0
#define i2s_rx_wrap 11
#define i2s_rx_pio_version 0

static const uint16_t i2s_rx_program_instructions[] = {
            //     .wrap_target
    0x2020, //  0: wait   0 pin, 0        side 0
    0xe03f, //  1: set    x, 31           side 0
    0x4001, //  2: in     pins, 1         side 0
    0xb042, //  3: nop                    side 1
    0x0042, //  4: jmp    x--, 2          side 0
    0x8020, //  5: push   block           side 0
    0x20a0, //  6: wait   1 pin, 0        side 0
    0xe03f, //  7: set    x, 31           side 0
    0x4001, //  8: in     pins, 1         side 0
    0xb042, //  9: nop                    side 1
    0x0048, // 10: jmp    x--, 8          side 0
    0x8020, // 11: push   block           side 0
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program i2s_rx_program = {
    .instructions = i2s_rx_program_instructions,
    .length = 12,
    .origin = -1,
    .pio_version = i2s_rx_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config i2s_rx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + i2s_rx_wrap_target, offset + i2s_rx_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

#include "hardware/pio.h"
#include "hardware/clocks.h"
static inline void i2s_rx_program_init(PIO pio, uint sm, uint offset,
                                       uint data_pin, uint sck_pin, uint ws_pin,
                                       float sample_rate_hz)
{
    pio_sm_config c = i2s_rx_program_get_default_config(offset);
    // pins wiring for this SM
    sm_config_set_in_pins(&c, data_pin);     // data in base
    sm_config_set_sideset_pins(&c, sck_pin); // SCK via sideset
    sm_config_set_jmp_pin(&c, ws_pin);       // WS observed on JMP pin (as input)
    // shift & fifo
    sm_config_set_in_shift(&c, false, true, 32);  // shift-left, autopush 32b
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    // clock divider for bit clock: Fs * 32 * 2 edges
    float div = (float)clock_get_hz(clk_sys) / (sample_rate_hz * 32.0f * 2.0f);
    sm_config_set_clkdiv(&c, div);
    // pin directions
    pio_sm_set_consecutive_pindirs(pio, sm, sck_pin, 1, true);   // SCK out
    pio_sm_set_consecutive_pindirs(pio, sm, ws_pin, 1, false);   // WS in (we 'wait pin')
    pio_sm_set_consecutive_pindirs(pio, sm, data_pin, 1, false); // DATA in
    // route pins to PIO
    gpio_set_function(sck_pin, GPIO_FUNC_PIO0);
    gpio_set_function(ws_pin,  GPIO_FUNC_PIO0);
    gpio_set_function(data_pin,GPIO_FUNC_PIO0);
    // start SM
    pio_sm_init(pio, sm, offset, &c);
}

#endif

